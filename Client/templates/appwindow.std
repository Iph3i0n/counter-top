<s:meta name="os-appwindow">
  <attr name="window" type="any"></attr>
  <attr name="connection" type="any"></attr>
</s:meta>

<script>
  import c from "../utils/class_names.ts";

  if (!window.counter_top_z_index) window.counter_top_z_index = 1;

  const iframe = CreateRef();
  const corner = CreateRef();
  const bounds = self.window.Bounds || {
    top: "30px",
    left: "20px",
    width: "400px",
    height: "300px",
  };

  let title;
  let open_menu;
  let menus = [];
  let z_index = window.counter_top_z_index++;
  let fullscreen = false;

  self.window.focus = () => {
    z_index = window.counter_top_z_index++;
    self.should_render();
  };

  function toggle_menu(item) {
    return () => {
      if (open_menu === item) open_menu = undefined;
      else open_menu = item;
    };
  }

  function toggle_fullscreen() {
    fullscreen = !fullscreen;
  }

  function on_close() {
    self.dispatchEvent(new CustomEvent("closed"));
  }

  function on_corner_down(e) {
    e.preventDefault();
    e.stopPropagation();
    const instance = iframe.current;
    instance.style.pointerEvents = "none";

    window.onmousemove = (e) => {
      instance.style.pointerEvents = "none";
      bounds.width = e.clientX - self.offsetLeft - 10 + "px";
      bounds.height = e.clientY - self.offsetTop - 10 + "px";
      self.style.width = bounds.width;
      self.style.height = bounds.height;
    };

    window.onmouseup = () => {
      instance.style.pointerEvents = "all";
      window.onmouseup = null;
      window.onmousemove = null;
    };
  }

  $on_mousedown: {
    z_index = window.counter_top_z_index++;
    self.should_render();

    const instance = iframe.current;
    instance.style.pointerEvents = "none";
    event.preventDefault();
    const offset_x = event.clientX - self.offsetLeft;
    const offset_y = event.clientY - self.offsetTop;

    window.onmouseup = () => {
      instance.style.pointerEvents = "all";
      window.onmouseup = null;
      window.onmousemove = null;
    };

    window.onmousemove = (e) => {
      e.preventDefault();
      instance.style.pointerEvents = "none";
      const new_x = e.clientX - offset_x;
      const new_y = e.clientY - offset_y;
      bounds.top = new_y + "px";
      bounds.left = new_x + "px";
      self.style.top = bounds.top;
      self.style.left = bounds.left;
    };
  }

  $load: {
    const instance = iframe.current;
    instance.contentWindow.Invoke = function (command, ...args) {
      return self.connection.Send(
        "execute",
        "execute",
        self.window.App,
        command,
        ...args
      );
    };

    instance.contentWindow.SetMenus = function (structure) {
      menus = structure;
      self.should_render();
    };

    instance.onload = () => {
      title = instance.contentDocument.title;
      self.should_render();
    };
  }
</script>

<style>
  :host {
    position: absolute;
    top: ":bounds.top";
    left: ":bounds.left";
    width: ":bounds.width";
    height: ":bounds.height";
    z-index: ":z_index";
  }

  iframe {
    border: none;
    background: #fff;
    width: 100%;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
    flex: 1;
  }

  .corner {
    position: absolute;
    bottom: 0.05rem;
    right: 0.25rem;
    width: 0.5rem;
    height: 0.5rem;
    background: #000;
    cursor: se-resize;
    border-radius: 0.5rem;
  }

  .action-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 1rem;
    height: 1rem;
    border-radius: 1rem;
    cursor: pointer;
    box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.2);
    margin: 0.5rem;
  }

  .close-button {
    background: #f00;
  }

  .fullscreen-button {
    background: #009600;
  }

  .main-panel {
    height: 100%;

    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  t-paragraph {
    text-align: center;
    margin: 0.5rem;
  }

  .title-panel {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .menus {
    margin: 0;
    flex: 1;
    text-align: left;
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  .menus t-paragraph {
    text-align: left;
    margin: 0;
  }

  .menu-item {
    position: relative;
    padding: 0.5rem;
    cursor: pointer;
  }

  .menu-item:hover {
    background: rgba(0, 0, 0, 0.1);
  }

  .menu-item .menu-content {
    opacity: 0;
    position: absolute;
    top: 110%;
    left: 0;
    pointer-events: none;
    transition: opacity 100ms;
  }

  .menu-item.open .menu-content {
    opacity: 1;
    pointer-events: all;
  }

  .menu-content .menu-button {
    padding: 0.5rem;
    white-space: nowrap;
  }

  .menu-content .menu-button:hover {
    background: rgba(0, 0, 0, 0.1);
  }

  @media screen and (max-width: 600px) {
    :host {
      position: absolute;
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
    }

    .main-panel {
      border: none;
      border-radius: 0;
    }

    .action-button,
    .corner {
      display: none;
    }
  }

  @if fullscreen {
    :host {
      position: absolute;
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
    }

    .main-panel {
      border: none;
      border-radius: 0;
    }

    .corner {
      display: none;
    }
  }
</style>

<d-panel class="main-panel" colour="body" bordered>
  <d-panel class="title-panel" colour="surface">
    <div class="action-button close-button" on:click="on_close">
      <t-icon name="close" size="badge" colour="primary" text></t-icon>
    </div>
    <div class="action-button fullscreen-button" on:click="toggle_fullscreen">
      <t-icon
        name=":fullscreen ? 'fullscreen-exit' : 'fullscreen'"
        size="badge"
        colour="primary"
        text
      ></t-icon>
    </div>
    <div class="menus">
      <s:for subject=":menus" key="menu_item">
        <div
          class=":c('menu-item', ['open', open_menu === menu_item])"
          on:click="toggle_menu(menu_item)"
        >
          <t-paragraph>
            <s:text use=":menu_item.name" />
          </t-paragraph>
          <div class="menu-content">
            <d-panel colour="surface" bordered>
              <s:for subject=":menu_item.items" key="item">
                <t-paragraph class="menu-button" on:click="item.onclick">
                  <s:text use=":item.name" />
                </t-paragraph>
              </s:for>
            </d-panel>
          </div>
        </div>
      </s:for>
    </div>
    <t-paragraph>
      <s:text use=":title || self.window.Name" />
    </t-paragraph>
  </d-panel>
  <iframe
    src=":`/apps/${self.window.App}/${self.window.Location}`"
    s:ref="iframe"
  ></iframe>
  <div class="corner" on:mousedown="on_corner_down"></div>
</d-panel>
